package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/dave-andrew/gqlgen-todos/graph/model"
	"github.com/dave-andrew/gqlgen-todos/middleware"
	"github.com/golang-jwt/jwt"
	"github.com/google/uuid"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, userid string, message string) (*model.Notification, error) {
	// panic(fmt.Errorf("not implemented: CreateNotification - createNotification"))
	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	senderid, _ := claims["user_id"].(string)

	notification := &model.Notification{
		ID:        uuid.NewString(),
		UserID:    userid,
		SenderID:  senderid,
		Message:   message,
		Status:    false,
		CreatedAt: time.Now(),
	}

	var block *model.BlockNotification

	if err := r.Db.Where("user_id = ? AND blocked_id = ?", userid, senderid).First(&block).Error; err != nil {
		if err := r.Db.Create(&notification).Error; err != nil {
			return nil, err
		}

		return notification, nil
	}

	return nil, nil
}

// BlockUser is the resolver for the blockUser field.
func (r *mutationResolver) BlockUser(ctx context.Context, userid string) (*model.BlockNotification, error) {
	// panic(fmt.Errorf("not implemented: BlockUser - blockUser"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userlogged, _ := claims["user_id"].(string)

	blockNotif := &model.BlockNotification{
		ID:        uuid.NewString(),
		UserID:    userlogged,
		BlockedID: userid,
	}

	if err := r.Db.Create(&blockNotif).Error; err != nil {
		return nil, err
	}

	return blockNotif, nil
}

// UnblockUser is the resolver for the unblockUser field.
func (r *mutationResolver) UnblockUser(ctx context.Context, userid string) (*model.BlockNotification, error) {
	// panic(fmt.Errorf("not implemented: UnblockUser - unblockUser"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	user, _ := claims["user_id"].(string)

	var blockNotif *model.BlockNotification

	if err := r.Db.Where("user_id = ? AND blocked_id = ?", user, userid).Delete(&blockNotif).Error; err != nil {
		return nil, err
	}

	return blockNotif, nil
}

// GetNotification is the resolver for the getNotification field.
func (r *queryResolver) GetNotification(ctx context.Context) ([]*model.Notification, error) {
	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	var notifications []*model.Notification

	if Redis, err := r.Redis.Get(ctx, fmt.Sprintf("notification:%s", userid)).Result(); err != nil {
		if err := r.Db.
			Where("user_id = ?", userid).
			Order("created_at DESC").
			Preload("Sender").
			Find(&notifications).
			Error; err != nil {
			return nil, err
		}

		if Redis, err := json.Marshal(notifications); err == nil {
			r.Redis.Set(ctx, fmt.Sprintf("notification:%s", userid), Redis, 1*time.Hour)
		} else {
			return nil, err
		}
	} else {
		if err := json.Unmarshal([]byte(Redis), &notifications); err != nil {
			return nil, err
		}
	}

	return notifications, nil
}

// CountNotification is the resolver for the countNotification field.
func (r *queryResolver) CountNotification(ctx context.Context) (int, error) {
	// panic(fmt.Errorf("not implemented: CountNotification - countNotification"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	var count int64

	if err := r.Db.Model(&model.Notification{}).Where("user_id = ? AND status = ?", userid, false).Count(&count).Error; err != nil {
		return 0, nil
	}

	return int(count), nil
}

// GetBlockStatus is the resolver for the getBlockStatus field.
func (r *queryResolver) GetBlockStatus(ctx context.Context, userid string) (bool, error) {
	// panic(fmt.Errorf("not implemented: GetBlockStatus - getBlockStatus"))

	token := ctx.Value("TokenValue")
	jwtToken, _ := middleware.ValidateJWTToken(token.(string))
	claims, _ := jwtToken.Claims.(jwt.MapClaims)
	userlogged, _ := claims["user_id"].(string)

	var block *model.BlockNotification

	if err := r.Db.Where("user_id = ? AND blocked_id = ?", userlogged, userid).First(&block).Error; err != nil {
		return false, nil
	}

	return true, nil
}
