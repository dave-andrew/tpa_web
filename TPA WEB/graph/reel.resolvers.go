package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"time"

	"github.com/dave-andrew/gqlgen-todos/graph/model"
	"github.com/dave-andrew/gqlgen-todos/middleware"
	"github.com/golang-jwt/jwt"
	"github.com/google/uuid"
)

// CreateReel is the resolver for the createReel field.
func (r *mutationResolver) CreateReel(ctx context.Context, url string) (*model.Reel, error) {
	// panic(fmt.Errorf("not implemented: CreateReel - createReel"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	reel := &model.Reel{
		ID:        uuid.NewString(),
		URL:       url,
		UserID:    userid,
		CreatedAt: time.Now(),
		ReelLike:  0,
		Share:     0,
	}

	if err := r.Db.Create(reel).Preload("User").Find(&reel).Error; err != nil {
		return nil, err
	}

	return reel, nil
}

// ShareReel is the resolver for the shareReel field.
func (r *mutationResolver) ShareReel(ctx context.Context, reelID string) (*model.Reel, error) {
	// panic(fmt.Errorf("not implemented: ShareReel - shareReel"))

	var reel *model.Reel

	if err := r.Db.Where("id = ?", reelID).Preload("User").First(&reel).Error; err != nil {
		return nil, err
	}

	reel.Share = reel.Share + 1

	if err := r.Db.Save(&reel).Error; err != nil {
		return nil, err
	}

	return reel, nil
}

// CreateReelComment is the resolver for the createReelComment field.
func (r *mutationResolver) CreateReelComment(ctx context.Context, reelID string, commentID *string, message string) (*model.ReelComment, error) {
	// panic(fmt.Errorf("not implemented: CreateReelComment - createReelComment"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	reelComment := &model.ReelComment{
		ID:        uuid.NewString(),
		ReelID:    reelID,
		CommentID: commentID,
		UserID:    userid,
		Message:   message,
		CreatedAt: time.Now(),
	}

	if err := r.Db.Create(&reelComment).Preload("User").Find(&reelComment).Error; err != nil {
		return nil, err
	}

	return reelComment, nil
}

// GetReels is the resolver for the getReels field.
func (r *queryResolver) GetReels(ctx context.Context) ([]*model.Reel, error) {
	// panic(fmt.Errorf("not implemented: GetReels - getReels"))

	var reels []*model.Reel

	if err := r.Db.Preload("User").Find(&reels).Error; err != nil {
		return nil, err
	}

	return reels, nil
}

// GetReelComments is the resolver for the getReelComments field.
func (r *queryResolver) GetReelComments(ctx context.Context, reelID string) ([]*model.ReelComment, error) {
	// panic(fmt.Errorf("not implemented: GetReelComments - getReelComments"))

	var reelComments []*model.ReelComment

	if err := r.Db.Order("created_at ASC").Where("reel_id = ? AND comment_id IS NULL", reelID).Preload("User").Find(&reelComments).Error; err != nil {
		return nil, err
	}

	return reelComments, nil
}

// ReelCountComment is the resolver for the reelCountComment field.
func (r *queryResolver) ReelCountComment(ctx context.Context, reelID string) (int, error) {
	// panic(fmt.Errorf("not implemented: ReelCountComment - reelCountComment"))

	var count int64

	if err := r.Db.Model(&model.ReelComment{}).Where("reel_id = ?", reelID).Count(&count).Error; err != nil {
		return 0, err
	}

	return int(count), nil
}

// GetReelCommentReply is the resolver for the getReelCommentReply field.
func (r *queryResolver) GetReelCommentReply(ctx context.Context, reelID string, commentID string) ([]*model.ReelComment, error) {
	// panic(fmt.Errorf("not implemented: GetReelCommentReply - getReelCommentReply"))

	var reelComments []*model.ReelComment

	if err := r.Db.Where("reel_id = ? AND comment_id = ?", reelID, commentID).Preload("User").Find(&reelComments).Error; err != nil {
		return nil, err
	}

	return reelComments, nil
}

// GetUserReel is the resolver for the getUserReel field.
func (r *queryResolver) GetUserReel(ctx context.Context, userID string) ([]*model.Reel, error) {
	// panic(fmt.Errorf("not implemented: GetUserReel - getUserReel"))

	var reels []*model.Reel

	if err := r.Db.Where("user_id = ?", userID).Preload("User").Find(&reels).Error; err != nil {
		return nil, err
	}

	return reels, nil
}
