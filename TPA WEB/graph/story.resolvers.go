package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"time"

	"github.com/dave-andrew/gqlgen-todos/graph/model"
	"github.com/dave-andrew/gqlgen-todos/middleware"
	"github.com/golang-jwt/jwt"
	"github.com/google/uuid"
)

// CreateStory is the resolver for the createStory field.
func (r *mutationResolver) CreateStory(ctx context.Context, storyURL *string, font *string, color *string, text *string) (string, error) {
	//panic(fmt.Errorf("not implemented: CreateStory - createStory"))
	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	story := &model.Story{
		ID:        uuid.NewString(),
		StoryURL:  storyURL,
		Font:      font,
		Color:     color,
		Text:      text,
		CreatedAt: time.Now(),
		UserID:    userid,
	}

	if err := r.Db.Create(story).Preload("User").Error; err != nil {
		return "", err
	}

	return "Story Posted!", nil
}

// GetUserStory is the resolver for the getUserStory field.
func (r *queryResolver) GetUserStory(ctx context.Context, userid string) ([]*model.Story, error) {
	var story []*model.Story

	if err := r.Db.Where("user_id = ?", userid).Preload("User").Find(&story).Error; err != nil {
		return nil, err
	}

	var filteredStories []*model.Story

	currentTime := time.Now()
	for _, s := range story {
		timeDifference := currentTime.Sub(s.CreatedAt)
		if timeDifference < 24*time.Hour {
			filteredStories = append(filteredStories, s)
		}
	}

	return filteredStories, nil
}

// IsUserHaveStory is the resolver for the isUserHaveStory field.
func (r *queryResolver) IsUserHaveStory(ctx context.Context, userid string) (bool, error) {
	// panic(fmt.Errorf("not implemented: IsUserHaveStory - isUserHaveStory"))
	var story *model.Story

	if err := r.Db.Where("user_id = ?", userid).Order("created_at desc").First(&story).Error; err != nil {
		return false, nil
	}

	timeDifference := time.Since(story.CreatedAt)
	if timeDifference < 24*time.Hour {
		return true, nil
	}

	return false, nil
}
