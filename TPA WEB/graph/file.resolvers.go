package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"time"

	"github.com/dave-andrew/gqlgen-todos/graph/model"
	"github.com/dave-andrew/gqlgen-todos/middleware"
	"github.com/golang-jwt/jwt"
	"github.com/google/uuid"
)

// UploadGroupFile is the resolver for the uploadGroupFile field.
func (r *mutationResolver) UploadGroupFile(ctx context.Context, name string, path string, typeArg string, groupid string) (*model.File, error) {
	// panic(fmt.Errorf("not implemented: UploadGroupFile - uploadGroupFile"))
	token := ctx.Value("TokenValue")
	jwtToken, _ := middleware.ValidateJWTToken(token.(string))
	claims, _ := jwtToken.Claims.(jwt.MapClaims)
	userid, _ := claims["user_id"].(string)

	file := &model.File{
		ID:        uuid.NewString(),
		Name:      name,
		Path:      path,
		Type:      typeArg,
		GroupID:   groupid,
		CreatedAt: time.Now(),
		UserID:    userid,
	}

	if err := r.Db.Create(&file).Preload("User").Preload("Group").First(&file).Error; err != nil {
		return nil, err
	}

	return file, nil
}

// DeleteGroupFile is the resolver for the deleteGroupFile field.
func (r *mutationResolver) DeleteGroupFile(ctx context.Context, fileid string) (bool, error) {
	// panic(fmt.Errorf("not implemented: DeleteGroupFile - deleteGroupFile"))

	var file *model.File

	if err := r.Db.Where("id = ?", fileid).First(&file).Error; err != nil {
		return false, err
	}

	if err := r.Db.Delete(&file).Error; err != nil {
		return false, err
	}

	return true, nil
}

// GetGroupFiles is the resolver for the getGroupFiles field.
func (r *queryResolver) GetGroupFiles(ctx context.Context, groupid string) ([]*model.File, error) {
	// panic(fmt.Errorf("not implemented: GetGroupFiles - getGroupFiles"))

	var files []*model.File

	if err := r.Db.Where("group_id = ?", groupid).Preload("User").Preload("Group").Find(&files).Error; err != nil {
		return nil, err
	}

	return files, nil
}
