package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"time"

	"github.com/dave-andrew/gqlgen-todos/graph/model"
	"github.com/dave-andrew/gqlgen-todos/middleware"
	"github.com/golang-jwt/jwt"
)

// LikePost is the resolver for the likePost field.
func (r *mutationResolver) LikePost(ctx context.Context, postID string) (string, error) {
	// panic(fmt.Errorf("not implemented: LikePost - likePost"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	reelLike := &model.Like{
		UserID:    userid,
		PostID:    postID,
		CreatedAt: time.Now(),
	}

	if err := r.Db.Create(reelLike).Error; err != nil {
		return "", err
	}

	if err := r.Db.Model(&model.Post{}).Where("id = ?", postID).Update("likes", r.Db.Raw("likes + ?", 1)).Error; err != nil {
		return "", err
	}

	return "Liked", nil
}

// LikeReel is the resolver for the likeReel field.
func (r *mutationResolver) LikeReel(ctx context.Context, reelID string) (string, error) {
	// panic(fmt.Errorf("not implemented: LikeReel - likeReel"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	reelLike := &model.ReelLike{
		UserID:    userid,
		ReelID:    reelID,
		CreatedAt: time.Now(),
	}

	if err := r.Db.Create(reelLike).Error; err != nil {
		return "", err
	}

	if err := r.Db.Model(&model.Reel{}).Where("id = ?", reelID).Update("reel_like", r.Db.Raw("reel_like + ?", 1)).Error; err != nil {
		return "", err
	}

	return "Liked", nil
}

// LikeGroupPost is the resolver for the likeGroupPost field.
func (r *mutationResolver) LikeGroupPost(ctx context.Context, postID string) (string, error) {
	// panic(fmt.Errorf("not implemented: LikeGroupPost - likeGroupPost"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	reelLike := &model.GroupLike{
		UserID:      userid,
		GroupPostID: postID,
		CreatedAt:   time.Now(),
	}

	if err := r.Db.Create(reelLike).Error; err != nil {
		return "", err
	}

	if err := r.Db.Model(&model.GroupPost{}).Where("id = ?", postID).Update("likes", r.Db.Raw("likes + ?", 1)).Error; err != nil {
		return "", err
	}

	return "Liked", nil
}

// UnlikePost is the resolver for the unlikePost field.
func (r *mutationResolver) UnlikePost(ctx context.Context, postID string) (string, error) {
	// panic(fmt.Errorf("not implemented: UnlikePost - unlikePost"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	if err := r.Db.Where("user_id = ? AND post_id = ?", userid, postID).Delete(&model.Like{}).Error; err != nil {
		return "", err
	}

	if err := r.Db.Model(&model.Post{}).Where("id = ?", postID).Update("likes", r.Db.Raw("likes - ?", 1)).Error; err != nil {
		return "", err
	}

	return "Unliked", nil
}

// UnlikeReel is the resolver for the unlikeReel field.
func (r *mutationResolver) UnlikeReel(ctx context.Context, reelID string) (string, error) {
	// panic(fmt.Errorf("not implemented: UnlikeReel - unlikeReel"))
	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	if err := r.Db.Where("user_id = ? AND reel_id = ?", userid, reelID).Delete(&model.ReelLike{}).Error; err != nil {
		return "", err
	}

	if err := r.Db.Model(&model.Reel{}).Where("id = ?", reelID).Update("reel_like", r.Db.Raw("reel_like - ?", 1)).Error; err != nil {
		return "", err
	}

	return "Unliked", nil
}

// UnlikeGroupPost is the resolver for the unlikeGroupPost field.
func (r *mutationResolver) UnlikeGroupPost(ctx context.Context, postID string) (string, error) {
	// panic(fmt.Errorf("not implemented: UnlikeGroupPost - unlikeGroupPost"))

	var groupPost *model.GroupPost

	if err := r.Db.Where("id = ?", postID).First(&groupPost).Error; err != nil {
		return "", err
	}

	if err := r.Db.Model(&model.GroupPost{}).Where("id = ?", postID).Update("likes", r.Db.Raw("likes - ?", 1)).Error; err != nil {
		return "", err
	}

	return "Unliked", nil
}

// GetLikes is the resolver for the getLikes field.
func (r *queryResolver) GetLikes(ctx context.Context) ([]*model.Like, error) {
	panic(fmt.Errorf("not implemented: GetLikes - getLikes"))
}

// GetLike is the resolver for the getLike field.
func (r *queryResolver) GetLike(ctx context.Context, postID string) (bool, error) {
	// panic(fmt.Errorf("not implemented: GetLike - getLike"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	var like *model.Like

	if err := r.Db.Where("post_id = ? AND user_id = ?", postID, userid).First(&like).Error; err != nil {
		return false, nil
	}

	return true, nil
}

// GetReelLikes is the resolver for the getReelLikes field.
func (r *queryResolver) GetReelLikes(ctx context.Context) ([]*model.ReelLike, error) {
	panic(fmt.Errorf("not implemented: GetReelLikes - getReelLikes"))
}

// GetReelLike is the resolver for the getReelLike field.
func (r *queryResolver) GetReelLike(ctx context.Context, reelID string) (bool, error) {
	// panic(fmt.Errorf("not implemented: GetReelLike - getReelLike"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	var reelLike *model.ReelLike
	if err := r.Db.Where("reel_id = ? AND user_id = ?", reelID, userid).First(&reelLike).Error; err != nil {
		return false, err
	}

	return true, nil
}

// GetGroupLikes is the resolver for the getGroupLikes field.
func (r *queryResolver) GetGroupLikes(ctx context.Context, postid string) ([]*model.Like, error) {
	panic(fmt.Errorf("not implemented: GetGroupLikes - getGroupLikes"))
}

// GetGroupLike is the resolver for the getGroupLike field.
func (r *queryResolver) GetGroupLike(ctx context.Context, postID string) (bool, error) {
	// panic(fmt.Errorf("not implemented: GetGroupLike - getGroupLike"))

	token := ctx.Value("TokenValue")

	jwtToken, _ := middleware.ValidateJWTToken(token.(string))

	claims, _ := jwtToken.Claims.(jwt.MapClaims)

	userid, _ := claims["user_id"].(string)

	var groupLike *model.GroupLike

	if err := r.Db.Where("post_id = ? AND user_id = ?", postID, userid).First(&groupLike).Error; err != nil {
		return false, err
	}

	return true, nil
}
